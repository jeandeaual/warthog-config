name: build
on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'LICENSE'
      - '.git*'
      - '**.md'
      - '.vscode/*'
      - 'assets/*'
  push:
    tags:
      - 'v*'
    branches:
      - master
    paths-ignore:
      - 'LICENSE'
      - '.git*'
      - '**.md'
      - 'assets/*'
jobs:
  build-linux:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install the Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          target: ${{ matrix.target }}
          override: true
      - name: Build
        run: cargo build --release --target=${{ matrix.target }}
      - name: Get the package name
        id: package
        run: echo "::set-output name=name::$(cargo metadata --format-version 1 | jq -r '.workspace_members[0]' | cut -d' ' -f 1)"
      - name: Prepare the artifact folder
        run: mkdir artifact
      - name: Strip the built binary
        run: strip -s "target/${TARGET}/release/${PACKAGE_NAME}"
        env:
          TARGET: ${{ matrix.target }}
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
      - name: Prepare the artifact
        run: cp "target/${TARGET}/release/${PACKAGE_NAME}" artifact/
        env:
          TARGET: ${{ matrix.target }}
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
      - name: Prepare the udev rules
        run: cp assets/*.rules artifact/
      - name: Get the short commit SHA
        id: slug
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Upload the artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ steps.package.outputs.name }}-${{ matrix.target }}-${{ steps.slug.outputs.sha7 }}
          path: artifact
  build-macos:
    name: Build
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          # It doesn't seem to be possible to build a aarch64 binary on an x64 host
          # https://github.com/actions/virtual-environments/issues/2187
          # - aarch64-apple-darwin
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install the Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          target: ${{ matrix.target }}
          override: true
      - name: Build
        run: cargo build --release --target=${{ matrix.target }}
      - name: Get the package name
        id: package
        run: echo "::set-output name=name::$(cargo metadata --format-version 1 | jq -r '.workspace_members[0]' | cut -d' ' -f 1)"
      - name: Prepare the artifact folder
        run: mkdir artifact
      - name: Strip the built binary
        run: strip -S -x "target/${TARGET}/release/${PACKAGE_NAME}"
        env:
          TARGET: ${{ matrix.target }}
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
      - name: Prepare the artifact
        run: cp "target/${TARGET}/release/${PACKAGE_NAME}" artifact/
        env:
          TARGET: ${{ matrix.target }}
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
      - name: Get the short commit SHA
        id: slug
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Upload the artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ steps.package.outputs.name }}-${{ matrix.target }}-${{ steps.slug.outputs.sha7 }}
          path: artifact
  build-windows:
    name: Build
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install the Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          target: ${{ matrix.target }}
          override: true
      - name: Build
        run: cargo build --release --target=${{ matrix.target }}
      - name: Get the package name
        id: package
        run: echo "::set-output name=name::$(cargo metadata --format-version 1 | jq -r '.workspace_members[0]' | %{ $_.split(" ")[0] })"
      - name: Prepare the artifact folder
        run: mkdir artifact
      - name: Prepare the artifact
        run: cp "target\${env:TARGET}\release\${env:PACKAGE_NAME}.exe" artifact\
        env:
          TARGET: ${{ matrix.target }}
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
      - name: Get the short commit SHA
        id: slug
        run: echo "::set-output name=sha7::$(echo ${env:GITHUB_SHA} | %{ $_.substring(0, 7) })"
      - name: Upload the artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: ${{ steps.package.outputs.name }}-${{ matrix.target }}-${{ steps.slug.outputs.sha7 }}
          path: artifact
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            components: clippy
            override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  release:
    # Only release when pushing a tag
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Release
    needs:
      - build-linux
      - build-macos
      - build-windows
      - lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Get the short commit SHA
        id: slug
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Get the package name
        id: package
        run: echo "::set-output name=name::$(cargo metadata --format-version 1 | jq -r '.workspace_members[0]' | cut -d' ' -f 1)"
      - uses: olegtarasov/get-tag@v2.1
        id: tagName
        with:
          tagRegex: "v(?<version>.*)"
      - name: Download the build artifact (Linux x64)
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.package.outputs.name }}-x86_64-unknown-linux-gnu-${{ steps.slug.outputs.sha7 }}
          path: release-linux-x64
      - name: Archive the build artifact (Linux x64)
        run: tar -cvzf "${PACKAGE_NAME}-${TARGET}-${VERSION}.tar.gz" "release-${TARGET}"/*
        env:
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
          VERSION: ${{ steps.tagName.outputs.version }}
          TARGET: linux-x64
      - name: Download the build artifact (macOS x64)
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.package.outputs.name }}-x86_64-apple-darwin-${{ steps.slug.outputs.sha7 }}
          path: release-macos-x64
      - name: Archive the build artifact (macOS x64)
        run: cd "release-${TARGET}" && zip -9 -r "../${PACKAGE_NAME}-${TARGET}-${VERSION}.zip" *
        env:
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
          VERSION: ${{ steps.tagName.outputs.version }}
          TARGET: macos-x64
      - name: Download the build artifact (Windows x64)
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.package.outputs.name }}-x86_64-pc-windows-msvc-${{ steps.slug.outputs.sha7 }}
          path: release-windows-x64
      - name: Archive the build artifact (Windows x64)
        run: cd "release-${TARGET}" && zip -9 -r "../${PACKAGE_NAME}-${TARGET}-${VERSION}.zip" *
        env:
          PACKAGE_NAME: ${{ steps.package.outputs.name }}
          VERSION: ${{ steps.tagName.outputs.version }}
          TARGET: windows-x64
      - name: Create a new release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          artifacts: "*.tar.*,*.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
